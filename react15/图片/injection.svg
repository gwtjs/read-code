<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="3131px" height="1641px" viewBox="-0.5 -0.5 3131 1641" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2021-01-08T07:36:28.781Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36&quot; etag=&quot;NmlaJcTId77KpXoKJ0uF&quot; version=&quot;14.1.8&quot; type=&quot;github&quot;&gt;&lt;diagram id=&quot;eEZJiGaDPdHwFywjGvqD&quot; name=&quot;第 1 页&quot;&gt;&lt;/diagram&gt;&lt;/mxfile&gt;" resource="https://app.diagrams.net/#Hgwtjs%2Fread-code%2Fmaster%2Freact15%2F%E5%9B%BE%E7%89%87%2Finjection.svg"><defs/><g><path d="M 270 483 L 270 699.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 270 704.88 L 266.5 697.88 L 270 699.63 L 273.5 697.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="105" y="343" width="330" height="140" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 332px; height: 140px; padding-top: 343px; margin-left: 105px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 330px; height: 140px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src/renderers/dom/ReactDOM.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">ReactDefaultInjection.inject();</span><br /></p></div></div></div></foreignObject><text x="105" y="355" fill="#000000" font-family="Helvetica" font-size="12px">src/renderers/dom/ReactDOM.js...</text></switch></g><path d="M 405 706 L 405 630 L 983.63 630" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 988.88 630 L 981.88 633.5 L 983.63 630 L 981.88 626.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="706" width="540" height="787" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 542px; height: 787px; padding-top: 706px; margin-left: 0px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 540px; height: 787px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src/renderers/dom/shared/ReactDefaultInjection.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">function inject() {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  if (alreadyInjected) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    return;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  alreadyInjected = true;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.EventEmitter.injectReactEventListener(</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    ReactEventListener</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  );</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.EventPluginHub.injectEventPluginsByName({</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    SimpleEventPlugin: SimpleEventPlugin,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    EnterLeaveEventPlugin: EnterLeaveEventPlugin,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    ChangeEventPlugin: ChangeEventPlugin,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    SelectEventPlugin: SelectEventPlugin,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    BeforeInputEventPlugin: BeforeInputEventPlugin,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  });</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.NativeComponent.injectGenericComponentClass(</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    ReactDOMComponent</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  );</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.NativeComponent.injectTextComponentClass(</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    ReactDOMTextComponent</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  );</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.EmptyComponent.injectEmptyComponentFactory(</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    function(instantiate) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      return new ReactDOMEmptyComponent(instantiate);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  );</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.Updates.injectReconcileTransaction(</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    ReactReconcileTransaction</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  );</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.Updates.injectBatchingStrategy(</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    ReactDefaultBatchingStrategy</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  );</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">}</span><br /></p></div></div></div></foreignObject><text x="0" y="718" fill="#000000" font-family="Helvetica" font-size="12px">src/renderers/dom/shared/ReactDefaultInjection.js...</text></switch></g><path d="M 1175 750 L 1175 959 L 1106.37 959" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1101.12 959 L 1108.12 955.5 L 1106.37 959 L 1108.12 962.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1175 750 L 1175 1395 L 1106.37 1395" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1101.12 1395 L 1108.12 1391.5 L 1106.37 1395 L 1108.12 1398.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1175 750 L 1175 959 L 1233.13 959" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1238.38 959 L 1231.38 962.5 L 1233.13 959 L 1231.38 955.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1175 750 L 1175 1350 L 1215.13 1350" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1220.38 1350 L 1213.38 1353.5 L 1215.13 1350 L 1213.38 1346.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1360 630 L 1690 630 L 1690 965 L 1783.63 965" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1788.88 965 L 1781.88 968.5 L 1783.63 965 L 1781.88 961.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1360 630 L 1690 630 L 1690 178 L 1773.63 178" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1778.88 178 L 1771.88 181.5 L 1773.63 178 L 1771.88 174.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1370 630 L 1690 630 L 1690 550 L 1783.63 550" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1788.88 550 L 1781.88 553.5 L 1783.63 550 L 1781.88 546.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1360 630 L 1690 630 L 1690 1415 L 1783.63 1415" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1788.88 1415 L 1781.88 1418.5 L 1783.63 1415 L 1781.88 1411.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1175 510 L 1175 409 L 1474.6 409 L 1474.6 314.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 1474.6 309.12 L 1478.1 316.12 L 1474.6 314.37 L 1471.1 316.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 1175 510 L 1175 409 L 909 409 L 909 314.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 909 309.12 L 912.5 316.12 L 909 314.37 L 905.5 316.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="990" y="510" width="370" height="240" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 372px; height: 240px; padding-top: 510px; margin-left: 990px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 370px; height: 240px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src/renderers/dom/shared/ReactInjection.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ReactInjection = {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  Component: ReactComponentEnvironment.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  Class: ReactClass.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  DOMProperty: DOMProperty.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  EmptyComponent: ReactEmptyComponent.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  EventPluginHub: EventPluginHub.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  EventPluginUtils: EventPluginUtils.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  EventEmitter: ReactBrowserEventEmitter.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  NativeComponent: ReactNativeComponent.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  Perf: ReactPerf.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  Updates: ReactUpdates.injection,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">};</span><br /></p></div></div></div></foreignObject><text x="990" y="522" fill="#000000" font-family="Helvetica" font-size="12px">src/renderers/dom/shared/ReactInjection.js...</text></switch></g><rect x="578.5" y="48" width="661" height="260" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 663px; height: 260px; padding-top: 48px; margin-left: 579px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 661px; height: 260px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src/renderers/dom/shared/reconciler/ReactComponentEnvironment.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ReactComponentEnvironment = {</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injection: {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    injectEnvironment: function(environment) {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>      invariant(<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>        !injected,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>        'ReactCompositeComponent: injectEnvironment() can only be called once.'<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>      );<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>      injected = true;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    },<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  },<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>};</div></div></div></div></foreignObject><text x="579" y="60" fill="#000000" font-family="Helvetica" font-size="12px">src/renderers/dom/shared/reconciler/ReactComponentEnvironment.js...</text></switch></g><rect x="1289" y="108" width="371" height="200" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 373px; height: 200px; padding-top: 108px; margin-left: 1289px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 371px; height: 200px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\isomorphic\classic\class\ReactClass.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var injectedMixins = [];</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"><br /></div><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)">var ReactClass = {<div style="resize: none ; outline: 0px ; font-size: inherit"></div><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injection: {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    injectMixin: function (mixin) {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>      injectedMixins.push(mixin);<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    }<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  }<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>};</div></div></div></div></foreignObject><text x="1289" y="120" fill="#000000" font-family="Helvetica" font-size="12px">src\isomorphic\classic\class\ReactClass.js...</text></switch></g><rect x="1780" y="13" width="531" height="330" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 533px; height: 330px; padding-top: 13px; margin-left: 1780px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 531px; height: 330px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\dom\shared\DOMProperty.js</span><br /></p><hr /><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)">var DOMPropertyInjection = {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  /**<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>   * Mapping from normalized, camelcased property names to a configuration that<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>   * specifies how the associated DOM property should be accessed or rendered.<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>   */<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  MUST_USE_PROPERTY: 0x1,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  HAS_SIDE_EFFECTS: 0x2,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  HAS_BOOLEAN_VALUE: 0x4,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  HAS_NUMERIC_VALUE: 0x8,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injectDOMPropertyConfig: function (domPropertyConfig) { }<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>};<br /></div><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"><br /></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var DOMProperty = { </span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injection: DOMPropertyInjection</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">};</span><br /></p></div></div></div></foreignObject><text x="1780" y="25" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\dom\shared\DOMProperty.js...</text></switch></g><rect x="680" y="823.5" width="420" height="271" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 422px; height: 271px; padding-top: 824px; margin-left: 680px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 420px; height: 271px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\shared\reconciler\ReactEmptyComponent.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var emptyComponentFactory;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ReactEmptyComponentInjection = {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injectEmptyComponentFactory: function (factory) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    emptyComponentFactory = factory;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">};</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ReactEmptyComponent = {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  create: function (instantiate) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    return emptyComponentFactory(instantiate);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">};</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">ReactEmptyComponent.injection = ReactEmptyComponentInjection;</span><br /></p></div></div></div></foreignObject><text x="680" y="836" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\shared\reconciler\ReactEmptyComponent.js...</text></switch></g><path d="M 2320 550 L 2390 550 L 2390 400 L 2453.63 400" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2458.88 400 L 2451.88 403.5 L 2453.63 400 L 2451.88 396.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1790" y="370" width="530" height="360" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 532px; height: 360px; padding-top: 370px; margin-left: 1790px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 530px; height: 360px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\shared\event\EventPluginHub.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var EventPluginHub = {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  /**</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * Methods for injecting dependencies.</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   */</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injection: {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    /**</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">     * @param {array} InjectedEventPluginOrder</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">     * @public</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">     */</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    /**</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">     * @param {object} injectedNamesToPlugins Map from names to plugin modules.</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">     */</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  },</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)">}</div></div></div></div></foreignObject><text x="1790" y="382" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\shared\event\EventPluginHub.js...</text></switch></g><rect x="1239.5" y="819" width="402" height="280" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 404px; height: 280px; padding-top: 819px; margin-left: 1240px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 402px; height: 280px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\shared\event\EventPluginUtils.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ComponentTree;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var TreeTraversal;</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>var injection = {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injectComponentTree: function (Injected) {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    ComponentTree = Injected;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  },<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injectTreeTraversal: function (Injected) {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    TreeTraversal = Injected;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  }<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>};<div style="resize: none ; outline: 0px ; font-size: inherit"><br /><div style="resize: none ; outline: 0px ; font-size: inherit">var EventPluginUtils = {<div style="resize: none ; outline: 0px ; font-size: inherit"></div><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injection: injection<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>};</div></div></div></div></div></div></foreignObject><text x="1240" y="831" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\shared\event\EventPluginUtils.js...</text></switch></g><path d="M 2340 965 L 2400 965 L 2400 1099 L 2453.63 1099" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2458.88 1099 L 2451.88 1102.5 L 2453.63 1099 L 2451.88 1095.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="1790" y="810" width="550" height="310" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 552px; height: 310px; padding-top: 810px; margin-left: 1790px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 550px; height: 310px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\dom\client\ReactBrowserEventEmitter.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  /**</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * Injectable event backend</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   */</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  ReactEventListener: null,</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injection: {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    /**</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">     * @param {object} ReactEventListener</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">     */</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    injectReactEventListener: function (ReactEventListener) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  },</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)">}</div></div></div></div></foreignObject><text x="1790" y="822" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\dom\client\ReactBrowserEventEmitter.js...</text></switch></g><rect x="680" y="1180" width="420" height="430" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 422px; height: 430px; padding-top: 1180px; margin-left: 680px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 420px; height: 430px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\shared\reconciler\ReactNativeComponent.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var autoGenerateWrapperClass = null;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var genericComponentClass = null;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">// This registry keeps track of wrapper classes around native tags.</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var tagToComponentClass = {};</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var textComponentClass = null;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ReactNativeComponentInjection = {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injectGenericComponentClass: function (componentClass) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    genericComponentClass = componentClass;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  },</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injectTextComponentClass: function (componentClass) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    textComponentClass = componentClass;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  },</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injectComponentClasses: function (componentClasses) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    _assign(tagToComponentClass, componentClasses);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">};</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"><br /></div><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)">var ReactNativeComponent = {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  getComponentClassForElement: getComponentClassForElement,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  createInternalComponent: createInternalComponent,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  createInstanceForText: createInstanceForText,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  isTextComponent: isTextComponent,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injection: ReactNativeComponentInjection<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>}; </div></div></div></div></foreignObject><text x="680" y="1192" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\shared\reconciler\ReactNativeComponent.js...</text></switch></g><rect x="1790" y="1190" width="470" height="450" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 472px; height: 450px; padding-top: 1190px; margin-left: 1790px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 470px; height: 450px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\shared\reconciler\ReactUpdates.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var batchingStrategy = null;</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"><br /></div><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)">var ReactUpdatesInjection = {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injectReconcileTransaction: function (ReconcileTransaction) {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  },<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injectBatchingStrategy: function (_batchingStrategy) {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    batchingStrategy = _batchingStrategy;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  }<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>};<div style="resize: none ; outline: 0px ; font-size: inherit"><br /></div><div style="resize: none ; outline: 0px ; font-size: inherit">var ReactUpdates = {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  /**<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>   * React references `ReactReconcileTransaction` using this property in order<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>   * to allow dependency injection.<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>   *<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>   * @internal<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>   */<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  ReactReconcileTransaction: null,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  batchedUpdates: batchedUpdates,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  enqueueUpdate: enqueueUpdate,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  flushBatchedUpdates: flushBatchedUpdates,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injection: ReactUpdatesInjection,<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  asap: asap<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>};</div></div></div></div></div></foreignObject><text x="1790" y="1202" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\shared\reconciler\ReactUpdates.js...</text></switch></g><rect x="1221.5" y="1200" width="438.5" height="300" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 441px; height: 300px; padding-top: 1200px; margin-left: 1222px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 439px; height: 300px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\test\ReactPerf.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ReactPerf = {</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  storedMeasure: _noMeasure,<div style="resize: none ; outline: 0px ; font-size: inherit"><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  injection: {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    /**<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>     * @param {function} measure<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>     */<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    injectMeasure: function (measure) {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>      ReactPerf.storedMeasure = measure;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>    }<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  }<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>};<div style="resize: none ; outline: 0px ; font-size: inherit"><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>function _noMeasure(objName, fnName, func) {<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>  return func;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>}</div></div></div></div></div></div></foreignObject><text x="1222" y="1212" fill="#000000" font-family="Helvetica" font-size="12px">src\test\ReactPerf.js...</text></switch></g><rect x="2460" y="0" width="670" height="800" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 672px; height: 800px; padding-top: 0px; margin-left: 2460px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 670px; height: 800px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\shared\event\EventPluginRegistry.js</span><br /></p><hr /><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)">/**<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>* Injectable ordering of event plugins.<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>*/<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>var EventPluginOrder = null;<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div><br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>/**<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>* Injectable mapping from names to event plugin modules.<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>*/<br /><div style="resize: none ; outline: 0px ; font-size: inherit"></div>var namesToPlugins = {};<br /></div><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"><br /></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var EventPluginRegistry = {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injectEventPluginOrder: function (InjectedEventPluginOrder) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : void 0;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    // Clone the ordering so it cannot be dynamically mutated.</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    recomputePluginOrdering();</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  },</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  /**</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * Injects plugins to be used by `EventPluginHub`. The plugin names must be</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * in the ordering injected by `injectEventPluginOrder`.</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   *</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * Plugins can be injected as part of page initialization or on-the-fly.</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   *</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * @param {object} injectedNamesToPlugins Map from names to plugin modules.</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * @internal</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * @see {EventPluginHub.injection.injectEventPluginsByName}</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   */</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  injectEventPluginsByName: function (injectedNamesToPlugins) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    var isOrderingDirty = false;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    for (var pluginName in injectedNamesToPlugins) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">        continue;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      var PluginModule = injectedNamesToPlugins[pluginName];</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : void 0;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">        namesToPlugins[pluginName] = PluginModule;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">        isOrderingDirty = true;</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    if (isOrderingDirty) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">      recomputePluginOrdering();</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  },</span></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)">}</div></div></div></div></foreignObject><text x="2460" y="12" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\shared\event\EventPluginRegistry.js...</text></switch></g><rect x="2460" y="939" width="630" height="320" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe flex-start; justify-content: unsafe flex-start; width: 632px; height: 320px; padding-top: 939px; margin-left: 2460px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; width: 630px; height: 320px; overflow: hidden; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; width: 100%; height: 100%; white-space: nowrap; "><p style="margin: 0px ; margin-top: 4px ; text-align: center ; text-decoration: underline"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; font-weight: 700 ; text-align: left ; background-color: rgba(255 , 255 , 255 , 0.01)">src\renderers\shared\reconciler\ReactEventEmitterMixin.js</span><br /></p><hr /><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">function runEventQueueInBatch(events) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  EventPluginHub.enqueueEvents(events);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  EventPluginHub.processEventQueue(false);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">}</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">var ReactEventEmitterMixin = {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  /**</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * Streams a fired top-level event to `EventPluginHub` where plugins have the</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   * opportunity to create `ReactEvent`s to be dispatched.</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">   */</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">    runEventQueueInBatch(events);</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">  }</span><br style="color: rgb(50 , 50 , 50) ; font-size: 13px" /></p><div style="resize: none ; outline: 0px ; font-size: 13px ; color: rgb(50 , 50 , 50)"></div><p style="margin: 0px ; margin-left: 8px"><span style="color: rgb(50 , 50 , 50) ; font-size: 13px ; background-color: rgba(255 , 255 , 255 , 0.01)">};</span><br /></p></div></div></div></foreignObject><text x="2460" y="951" fill="#000000" font-family="Helvetica" font-size="12px">src\renderers\shared\reconciler\ReactEventEmitterMixin.js...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>