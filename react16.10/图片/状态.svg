<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="1291px" height="1051px" viewBox="-0.5 -0.5 1291 1051" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2021-03-30T10:17:00.105Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36&quot; etag=&quot;CGtC5hU_7jd632d-WENJ&quot; version=&quot;14.2.7&quot; type=&quot;github&quot;&gt;&lt;diagram id=&quot;o5Q6EKL0kc_VLwyrc5Qx&quot; name=&quot;第 1 页&quot;&gt;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&lt;/diagram&gt;&lt;/mxfile&gt;" resource="https://app.diagrams.net/#Hgwtjs%2Fread-code%2Fmaster%2Freact16.10%2F%E5%9B%BE%E7%89%87%2F%E7%8A%B6%E6%80%81.svg"><defs/><g><path d="M 260 800 L 280 800 L 280 810 L 293.63 810" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 298.88 810 L 291.88 813.5 L 293.63 810 L 291.88 806.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="770" width="260" height="60" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 800px; margin-left: 1px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">div = document.getElementById('root')<br /><br />ReactDOM.render(App, div)<br /><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span></div></div></div></foreignObject><text x="130" y="804" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">div = document.getElementById('root')...</text></switch></g><path d="M 637 760 L 608.5 760 L 608.5 770 L 586.37 770" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 581.12 770 L 588.12 766.5 L 586.37 770 L 588.12 773.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="637" y="720" width="260" height="80" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 760px; margin-left: 638px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">this._internalRoot = <span>createRootImpl(</span><div>  container: div,</div><div>  tag: LegacyRoot,</div><div>  options: undefined,</div><div>)</div></div></div></div></foreignObject><text x="767" y="764" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">this._internalRoot = createRootImpl(...</text></switch></g><path d="M 300 850 L 130 850 L 130 836.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 130 831.12 L 133.5 838.12 L 130 836.37 L 126.5 838.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="300" y="730" width="280" height="160" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 278px; height: 1px; padding-top: 810px; margin-left: 301px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">root = div._reactRootContainer = new ReactSyncRoot(div, LegacyRoot:0)<br /><br />fiberRoot = root.._internalRoot<br /><br /><div>unbatchedUpdates(() =&gt; {</div><div>      updateContainer(ReactNode:App, fiberRoot, parentComponent:root.current, callback);</div><div>    });<br /><br />return getPublicRootInstance(fiberRoot)<br /></div></div></div></div></foreignObject><text x="440" y="814" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">root = div._reactRootContainer = new ReactSync...</text></switch></g><path d="M 950 565 L 930 565 L 930 487.5 L 923.37 487.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 918.12 487.5 L 925.12 484 L 923.37 487.5 L 925.12 491 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="950" y="350" width="340" height="430" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 338px; height: 1px; padding-top: 565px; margin-left: 952px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>  this.tag = tag;</div><div>  this.current = null;</div><div>  this.containerInfo = containerInfo;</div><div>  this.pendingChildren = null;</div><div>  this.pingCache = null;</div><div>  this.finishedExpirationTime = NoWork;</div><div>  this.finishedWork = null;</div><div>  this.timeoutHandle = noTimeout;</div><div>  this.context = null;</div><div>  this.pendingContext = null;</div><div>  this.hydrate = hydrate;</div><div>  this.firstBatch = null;</div><div>  this.callbackNode = null;</div><div>  this.callbackPriority = NoPriority;</div><div>  this.firstPendingTime = NoWork;</div><div>  this.firstSuspendedTime = NoWork;</div><div>  this.lastSuspendedTime = NoWork;</div><div>  this.nextKnownPendingLevel = NoWork;</div><div>  this.lastPingedTime = NoWork;</div><div>  this.lastExpiredTime = NoWork;</div><div><br /></div><div>  if (enableSchedulerTracing) {</div><div>    this.interactionThreadID = unstable_getThreadID();</div><div>    this.memoizedInteractions = new Set();</div><div>    this.pendingInteractionMap = new Map();</div><div>  }</div><div>  if (enableSuspenseCallback) {</div><div>    this.hydrationCallbacks = null;</div><div>  }</div><div>}</div></div></div></div></foreignObject><text x="952" y="569" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><path d="M 680 860 L 630 860 L 630 850 L 586.37 850" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 581.12 850 L 588.12 846.5 L 586.37 850 L 588.12 853.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 830 900 L 830 920 L 830 900 L 830 913.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 830 918.88 L 826.5 911.88 L 830 913.63 L 833.5 911.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="680" y="820" width="300" height="80" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 298px; height: 1px; padding-top: 860px; margin-left: 681px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>executionContext &amp;= ~BatchedContext:1;</div><div>  executionContext |= LegacyUnbatchedContext:8;<br /><br /> updateContainer(ReactNode:App, fiberRoot, parentComponent:root.current, callback);<br /></div></div></div></div></foreignObject><text x="830" y="864" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">executionContext &amp;= ~BatchedContext:1;...</text></switch></g><rect x="665" y="920" width="330" height="130" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 985px; margin-left: 667px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div><div>const current = container.current;</div><div>  const currentTime = requestCurrentTime();</div><div>  const suspenseConfig = requestCurrentSuspenseConfig();</div><div>  const expirationTime = computeExpirationForFiber(</div><div>    currentTime,</div><div>    current,</div><div>    suspenseConfig,</div><div>  );</div></div></div></div></div></foreignObject><text x="667" y="989" fill="#000000" font-family="Helvetica" font-size="12px">const current = container.current;...</text></switch></g><path d="M 767 690 L 767 710 L 767 700 L 767 713.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 767 718.88 L 763.5 711.88 L 767 713.63 L 770.5 711.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="624" y="610" width="286" height="80" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 284px; height: 1px; padding-top: 650px; margin-left: 626px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "> root = createContainer(container, tag, hydrate:false, hydrationCallbacks:null)<br /><br />div.__reactContainere$randomKey = root.current<br /><br />return root</div></div></div></foreignObject><text x="626" y="654" fill="#000000" font-family="Helvetica" font-size="12px">root = createContainer(container, tag, hydrate...</text></switch></g><path d="M 743.5 570 L 743.5 590 L 767 590 L 767 603.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 767 608.88 L 763.5 601.88 L 767 603.63 L 770.5 601.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="570" y="460" width="347" height="110" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 515px; margin-left: 572px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "> root = new FiberRootNode(div, LegacyRoot,hydrate:false)<br /><br /><div>const uninitializedFiber = createHostRootFiber(LegacyRoot);</div><div>  root.current = uninitializedFiber;</div><div>  uninitializedFiber.stateNode = root;</div><br />return root</div></div></div></foreignObject><text x="572" y="519" fill="#000000" font-family="Helvetica" font-size="12px">root = new FiberRootNode(div, LegacyRoot,hydrate:false)...</text></switch></g><path d="M 527 630 L 548.5 630 L 548.5 515 L 563.63 515" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 568.88 515 L 561.88 518.5 L 563.63 515 L 561.88 511.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="180" y="560" width="347" height="140" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 630px; margin-left: 182px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>let mode;</div><div>  if (tag === ConcurrentRoot) {</div><div>    mode = ConcurrentMode | BatchedMode | StrictMode;</div><div>  } else if (tag === BatchedRoot) {</div><div>    mode = BatchedMode | StrictMode;</div><div>  } else {</div><div>    mode = NoMode;</div><div>  }</div><div>  return new FiberNode(tag:HostRoot, pendingProps:null, key:null, mode)</div></div></div></div></foreignObject><text x="182" y="634" fill="#000000" font-family="Helvetica" font-size="12px">let mode;...</text></switch></g><path d="M 353.5 520 L 353.5 553.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 353.5 558.88 L 350 551.88 L 353.5 553.63 L 357 551.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="180" y="0" width="347" height="520" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 260px; margin-left: 182px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>  // Instance</div><div>  this.tag = tag;</div><div>  this.key = key;</div><div>  this.elementType = null;</div><div>  this.type = null;</div><div>  this.stateNode = null;</div><div><br /></div><div>  // Fiber</div><div>  this.return = null;</div><div>  this.child = null;</div><div>  this.sibling = null;</div><div>  this.index = 0;</div><div><br /></div><div>  this.ref = null;</div><div><br /></div><div>  this.pendingProps = pendingProps;</div><div>  this.memoizedProps = null;</div><div>  this.updateQueue = null;</div><div>  this.memoizedState = null;</div><div>  this.dependencies = null;</div><div><br /></div><div>  this.mode = mode;</div><div><br /></div><div>  // Effects</div><div>  this.effectTag = NoEffect;</div><div>  this.nextEffect = null;</div><div><br /></div><div>  this.firstEffect = null;</div><div>  this.lastEffect = null;</div><div><br /></div><div>  this.expirationTime = NoWork;</div><div>  this.childExpirationTime = NoWork;</div><div><br /></div><div>  this.alternate = null;<br />}</div></div></div></div></foreignObject><text x="182" y="264" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>