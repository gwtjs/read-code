<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="2001px" height="1506px" viewBox="-0.5 -0.5 2001 1506" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2021-03-31T03:26:11.814Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36&quot; etag=&quot;mFHyymF8gGeQs8F8ll-G&quot; version=&quot;14.2.7&quot; type=&quot;github&quot;&gt;&lt;diagram id=&quot;o5Q6EKL0kc_VLwyrc5Qx&quot; name=&quot;第 1 页&quot;&gt;7R3bcptK8mtUkU+VXSB0sR+tixNVLNvHkjfn7IsLwUhiA4zOMFhSHvbbdy7McJUEAiy7NqnEgQb6NtM93T0NbmgDZ/sV6evVBJrAbrQUc9vQho1Wq9W+viH/UciOQ9QbTeWQJbLMABYCptYvEACVAOpbJvBiN2IIbWyt40ADui4wcAymIwQ38dsW0I5TXetLkAJMDd1OQ39YJl5x6HWrF8K/AWu5EpTVbiCxo4ubA0m8lW7CTQSkjRraAEGI+ZGzHQCbak/ohT93t+eqZAwBF+d5wNoOt7/czmLl+t/+vPvV+gYW7qUmmMM7ITEwiQKCU4jwCi6hq9ujENpH0HdNQNEq5Cy85x7CNQGqBPgfgPEuGE3dx5CAVtixg6ucJiW0V5YA5EEfGeCAAGJO6GgJ8IH72lLjZK4C6ACMduQ5BGwdW29xPvRgzizlfaFayUGg2QJaDvC+6bYfUDKtNwJgx4oJDd8hgl8RCUY2oIf93dhsfqFz48tFo9W1iWT9OSJHS8zUl4Q8A93Aw8fJFVGgCVDzdr1utAYUt/V2AIG31t3Y4Hf/8el07BvQhqih3VINLed6U6HMMoSZRxdMlj6zLxdfLnTHsnf8cQe6kJAhYxi7xWNTg96grLch3ZDBTtKpdIi+KZQZjDwT+u+wESCQIT2mjHWoyjtk2I7dq8p7xQQ8CU0rRMPHWV5hY91hyDjk+IgLTHxkJCZheBTA0PU3KwuDKdcvAW6IwhicGRuFqOw0whtAGGxzSS8vScFDwyG3R5GooaaUXQjvRsAb5j1DdUWvrbgHzXyOGKOELyP0k8PCTuXYRIHxGRPcl5pa3CKIeXOj+G0ovw3lt6H8NpTfhvLbUKo1lES4HQ+mI9oPdJ8ROAcaPxg6p0Pd4IFLmVqJlEwkKJswv2H6orBVJLcRsMrD4845chCiLrT7K3ryN0V21eqI8+E2wM7PdsFZhcmL9hmSFy2VvOCV5V29Wi4GiGj8mRkDz2W6ukNnrDv31qlFgc9/AwEdA/rM2FnbzSPLCXN0EpRATnN+rFsuCNYVdvMggjH+dA6EWF9yVPdgqRs7LlkpjHCNLeh6HCudsQvCr1kE6cW+O8/sR9qiBBK4kV5OL3JdlxfRumdxI1sL/yX8BDnmTqTXCU5DH0JPdlGHwp66kt7m76grqt/1tHO6nj2T4H1cTzvlelDE2VCDv3pFtPRBLXUgvYG47oJN0iRZoWS6cw36RFN4jKi9a7dKrpLLwpoDFPV9CuXtKukXjyPKsHnfnevYWAHzZW0Sb+k1mxcJDxs8qTR6/TLuKR/IZ1xI/TaZEh9IpEOUJStNEX0M5JwcQGcNXTY5b5l6DB/xkJDeY+i2PdeNnxcRfquSoje8OKjtEIIA9hFNWoghPPlz22JzY+x6WHcN0JRyHZgVH8w138QDvOsMz3yd4ZnV2gK8Vvv/NcK7yelmW9o5/exNys9mGV45V8OCRhpgCXfJgq3yKKVHEU7fp7JXgFe4u7G7gBJ7HFoBmTVwTctdDlaWbRI5KhdjTZHrZC2pHDOJZC2PrFGj7dpCOg1zZ5YTknmAPyD6WSUhhq9qKTDhGfr4m+6adkRHcMbhVc0ksK1+hoqpUxP61c4kwxrqRJxXMqLIw30a4lRvtkFMwcKTupA/IQsiC+8ik12CqlLPEx/d2myKkJj6Hp1DwKyJiK3XT8MlU/+7CzduoK978MZaEOqQ5Yngr1VZzJVWQSFnnJqHOWtBfjSBq89tMKU5iW8DNEO6QZRxUUsGwtTBsiiSZtBlZUVyPHM8lCrxaWxO2HklMZW42KwhiWCMOMCBJMI0xyFDXjzDVKYA10Y+cPIR6hNakI/RJ5Dy9HvDymYJM3kPDGR6V9ss4WsSUYqgFRma8j6/kE7231smG9Rta+mSYxssQmSlksNeO54dXmpKOj/U2hn5YVurKz9Ubz5O6S5n5S6RU/beMadUe59i2+AsuzrnUHOkm+8cvWW9w8l7xl48TRcuA89C9yWYc8nYMb9jf5Uh8AxkzQH1rZsVQDQ22dAfOju0XOaN6SErDFL9b4HhU7fMyBO3nMONluAzvctkgxgbIkViWEZJaBhphfcp8aUja2+qDllSHEeWPv6Ts/rfPq8Phwyrp0SI1Ss+YxXNkqk34HLwuvuLKHeH4lyfR/8nhc61KvCda+/5Ff3Bat7tbqKrIWM/UkY6sap3q7aqt5KrrJoGGSTFoGaSLG3K4qMcynLxbYJOLO1E4B8feHgQXiqdYghynsgPoLuwlnsoTmM3VUYbZBcrDWIrPgZhKfMOojtqVM0yRLP4iKq6VGfBfuTVI06OWCn8x4fyYydQ7XYn5mm0jP4pTcvyNLXlT/T5Tx1ry1d7jsXaZ90mE4jjDj02v2P9CbzXKVy7w34ltgSzzTB6ICvrtwvd9kAUGCttaLe0qJGrO4G1RvDeCEmfIG4j3TWh8x2Epet4aFBgu5yL+sFsU23HixvtrL3vbto2a+tKan32NLiVt0lx39C8k22m2xQP2iavnN6JwJlG1JntQK1Bwjpzmd+BoM53LdfCFpn7v4DJ6Cf8xTfosX4mHn+ErJQNgeKGLkvpKW7KUUkjvPIwkSq2H8dfejxC55O4HC2ReFyqN1n11F5GPKDW5nSuP7vT6eZ1OucNCLp5MjxejHJYzl7KtvgmS9hDw/+2FLLCB3Yd9KnVsN3iRO03JDgJwD3qNoOiVAw2xcgy+G0VbMYogMVHezURcPBOang/eWsW5AFWxXCJ5Uk4+cjKzFZl3pQvVsWgwsV3RZ8QXIuwmF/4CXaxcypmLR301S8k8l18sZDkXkfata0jZ9mXq3Idyb2H0z3rOnJkD0dsMZd0AsF+jmhtLoOsrm7On5HMlNlyeZSAvw45262rbwjDdSBNx8snYK6wA0hOnCBbKSmedPTVas2gHbTVj4U1t8lCUzlei7jIrcSqFERZ4eAGQ7L4IHMt2vPEV3fBV3zJL09E9HXFqVQ1vnzb7k8f+NX7B8H5FEfbc6vCbgLWr+kaFiillqonRSxgPSGZqsMhjhYLYGCv/BLF8Mwiy+kD5Lir0BxtkQ2wfaDxZB3I5dna30v74STes/dYXQsxWwKrfB2jag3oNns1cr/XitD6LP2UqbSt28mZt3Vq6zzQ8uUTwo1NdBqK0A/zKXOLmgxtvl4CdEUOZ6yxy2F3BGCqfpq7Ba1f/7pu0E+wULDWuuQIvJ2HgeNdFZgxkhe8ulrDTbPFE3iNfQrmkvxTiyNT5urBP7kxvumIa2FKpg8wNbVv4XGkjK4qPa3XVq9b2rtZWCAiNXK6TtN3lciAOA4wLWJg9q6gbOPJZDQc385Gr0/P48fn8ezv19l4Mnp8mUkhLwv2mIlF8o1Ykq/blCUFR9ktxODLdPT82r9/HHwfP3yVTErmWp1CQTTH+fD4PLm93y9xRykWmnOs948/9qNUlYI4pR4fwBuzvdNVOB7ej9KaS8/qQzPz4B4XWeEgYh1FwWaX4DmQ/SS5x/zFPIvK7NnUfbKZtCJHDPc6fBkLr9jXpxhV6rzGrPDu8yYn6KxtwC1D4a8UBh6sKEMQmXwg6GuhcxCIaxGP5+L8Hi+lq3H0BcRWEVWlUNEPHEhUk9u/Xqfjrw+j4aumvvbHs9fxw6wU+qDuLSkE5C6LD/HJ/k+w8vJA5JmO/z2KGNgpeCa3X8eD14eXSZ94mce7u+koNNlQ3HwSfux4RVWVeMDSynr/I6t/SevVFq9c54lX0t4FTqJJoTIv6lvThhPu3sSwnua5Zo/DR97/+0xS9jfQSG4Z6S6dVandtDmvPOsmrzwtEHQaosUeRb4qkp8TXqm1iJAEa2nDT+mnmM2l0Ka3EwVmteR4PiG4sGyQQKseniYf3F5F++H52g21XN+LyDDX1HvT5UZ3LKLdFN5C9prC++IB1Leh8ZPVGxOoy63MDxA5up1CWihtSCG9h5sUxnY5zZJYJIWyc3pgGCYDWwOsKQWeMEanxID7OI8HVMQdeGvI/COLs+Srx2HEZwGaYCo/6AO+V2Q7K2BG9wxeVG7QQoQzB4jFmJQce7/JYNEkDRz5m06EO+qIbesnCJ8IkuQdcxo606JOf9DdW8Z6Ya7eIP0KqGLYurfizG0s+qHLUAdfvKQWqjOhYL3SDSxA8Vfqb26qt62jNK9L0UwY3VFqvcqs8SipbnVmepRWpwitMO2Mem2WhPFARJ97gG0iK3ARzsYdNYdbm9kQ4+USuvauxASNflnjmIDHV5NPttR3rnOu9a3aQnPRW3J4rQ9HK/lSJSH6R+PUD899CNAfopaoKEXzi0Tc/Gl0Exe5UDAlRGZVv08j8DEdnFZUGFqegQAGZ9FFlP+CaZRcybLfzq1Fggi7R9Kzvew+s9998pnmXCh04bJwmDs7jvWpDE0KrRb2p/tzjaOPBp1atIV0tLUw7Z3ww/4GGqvz/l1VHrXkkSaP2vKoI48KhXByrrJPjIqadISPE3Hd6Vi3RwhBFKnLnuS4mYYSiArlvFFE8utfElWhTDcT1Q+SDA2BrZ+Y60ZxDgL9h+wVipGjqO5JShPBc2hSfLCgM/nmfNaL85kx5wmfi20EvzshvBb5rQna6H8=&lt;/diagram&gt;&lt;/mxfile&gt;" resource="https://app.diagrams.net/#Hgwtjs%2Fread-code%2Fmaster%2Freact16.10%2F%E5%9B%BE%E7%89%87%2F%E7%8A%B6%E6%80%81.svg"><defs/><g><path d="M 260 800 L 280 800 L 280 810 L 293.63 810" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 298.88 810 L 291.88 813.5 L 293.63 810 L 291.88 806.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="770" width="260" height="60" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 800px; margin-left: 1px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">div = document.getElementById('root')<br /><br />ReactDOM.render(App, div)<br /><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span></div></div></div></foreignObject><text x="130" y="804" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">div = document.getElementById('root')...</text></switch></g><path d="M 637 760 L 608.5 760 L 608.5 770 L 586.37 770" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 581.12 770 L 588.12 766.5 L 586.37 770 L 588.12 773.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="637" y="720" width="260" height="80" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 760px; margin-left: 638px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">this._internalRoot = <span>createRootImpl(</span><div>  container: div,</div><div>  tag: LegacyRoot,</div><div>  options: undefined,</div><div>)</div></div></div></div></foreignObject><text x="767" y="764" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">this._internalRoot = createRootImpl(...</text></switch></g><path d="M 300 850 L 130 850 L 130 836.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 130 831.12 L 133.5 838.12 L 130 836.37 L 126.5 838.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="300" y="730" width="280" height="160" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 278px; height: 1px; padding-top: 810px; margin-left: 301px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">root = div._reactRootContainer = new ReactSyncRoot(div, LegacyRoot:0)<br /><br />fiberRoot = root.._internalRoot<br /><br /><div>unbatchedUpdates(() =&gt; {</div><div>      updateContainer(ReactNode:App, fiberRoot, parentComponent:root.current, callback);</div><div>    });<br /><br />return getPublicRootInstance(fiberRoot)<br /></div></div></div></div></foreignObject><text x="440" y="814" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">root = div._reactRootContainer = new ReactSync...</text></switch></g><path d="M 950 565 L 930 565 L 930 487.5 L 923.37 487.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 918.12 487.5 L 925.12 484 L 923.37 487.5 L 925.12 491 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="950" y="350" width="340" height="430" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 338px; height: 1px; padding-top: 565px; margin-left: 952px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>  this.tag = tag;</div><div>  this.current = null;</div><div>  this.containerInfo = containerInfo;</div><div>  this.pendingChildren = null;</div><div>  this.pingCache = null;</div><div>  this.finishedExpirationTime = NoWork;</div><div>  this.finishedWork = null;</div><div>  this.timeoutHandle = noTimeout;</div><div>  this.context = null;</div><div>  this.pendingContext = null;</div><div>  this.hydrate = hydrate;</div><div>  this.firstBatch = null;</div><div>  this.callbackNode = null;</div><div>  this.callbackPriority = NoPriority;</div><div>  this.firstPendingTime = NoWork;</div><div>  this.firstSuspendedTime = NoWork;</div><div>  this.lastSuspendedTime = NoWork;</div><div>  this.nextKnownPendingLevel = NoWork;</div><div>  this.lastPingedTime = NoWork;</div><div>  this.lastExpiredTime = NoWork;</div><div><br /></div><div>  if (enableSchedulerTracing) {</div><div>    this.interactionThreadID = unstable_getThreadID();</div><div>    this.memoizedInteractions = new Set();</div><div>    this.pendingInteractionMap = new Map();</div><div>  }</div><div>  if (enableSuspenseCallback) {</div><div>    this.hydrationCallbacks = null;</div><div>  }</div><div>}</div></div></div></div></foreignObject><text x="952" y="569" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><path d="M 670 880 L 625 880 L 625 850 L 586.37 850" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 581.12 850 L 588.12 846.5 L 586.37 850 L 588.12 853.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 820 940 L 820 960 L 820 950 L 820 963.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 820 968.88 L 816.5 961.88 L 820 963.63 L 823.5 961.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="670" y="820" width="300" height="120" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 298px; height: 1px; padding-top: 880px; margin-left: 671px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div style="text-align: left">// Describes where we are in the React execution stack</div><div style="text-align: left"><span>let executionContext: ExecutionContext = NoContext:0;</span></div><div style="text-align: left">executionContext &amp;= ~BatchedContext:1;</div><div><div style="text-align: left"><span>  executionContext |= LegacyUnbatchedContext:8;</span></div><div style="text-align: left"><br /></div><div style="text-align: left"><span> updateContainer(ReactNode:App, fiberRoot, parentComponent:root.current, callback);</span></div></div></div></div></div></foreignObject><text x="820" y="884" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// Describes where we are in the React execution s...</text></switch></g><rect x="655" y="970" width="330" height="130" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 1035px; margin-left: 657px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div><div>const current = container.current;</div><div>  const currentTime = requestCurrentTime();</div><div>  const suspenseConfig = requestCurrentSuspenseConfig();</div><div>  const expirationTime = computeExpirationForFiber(</div><div>    currentTime,</div><div>    current,</div><div>    suspenseConfig,</div><div>  );</div></div></div></div></div></foreignObject><text x="657" y="1039" fill="#000000" font-family="Helvetica" font-size="12px">const current = container.current;...</text></switch></g><path d="M 767 690 L 767 710 L 767 700 L 767 713.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 767 718.88 L 763.5 711.88 L 767 713.63 L 770.5 711.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="624" y="610" width="286" height="80" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 284px; height: 1px; padding-top: 650px; margin-left: 626px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "> root = createContainer(container, tag, hydrate:false, hydrationCallbacks:null)<br /><br />div.__reactContainere$randomKey = root.current<br /><br />return root</div></div></div></foreignObject><text x="626" y="654" fill="#000000" font-family="Helvetica" font-size="12px">root = createContainer(container, tag, hydrate...</text></switch></g><path d="M 743.5 570 L 743.5 590 L 767 590 L 767 603.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 767 608.88 L 763.5 601.88 L 767 603.63 L 770.5 601.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="570" y="460" width="347" height="110" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 515px; margin-left: 572px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "> root = new FiberRootNode(div, LegacyRoot,hydrate:false)<br /><br /><div>const uninitializedFiber = createHostRootFiber(LegacyRoot);</div><div>  root.current = uninitializedFiber;</div><div>  uninitializedFiber.stateNode = root;</div><br />return root</div></div></div></foreignObject><text x="572" y="519" fill="#000000" font-family="Helvetica" font-size="12px">root = new FiberRootNode(div, LegacyRoot,hydrate:false)...</text></switch></g><path d="M 527 630 L 548.5 630 L 548.5 515 L 563.63 515" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 568.88 515 L 561.88 518.5 L 563.63 515 L 561.88 511.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="180" y="560" width="347" height="140" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 630px; margin-left: 182px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>let mode;</div><div>  if (tag === ConcurrentRoot) {</div><div>    mode = ConcurrentMode | BatchedMode | StrictMode;</div><div>  } else if (tag === BatchedRoot) {</div><div>    mode = BatchedMode | StrictMode;</div><div>  } else {</div><div>    mode = NoMode;</div><div>  }</div><div>  return new FiberNode(tag:HostRoot, pendingProps:null, key:null, mode)</div></div></div></div></foreignObject><text x="182" y="634" fill="#000000" font-family="Helvetica" font-size="12px">let mode;...</text></switch></g><path d="M 353.5 520 L 353.5 553.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 353.5 558.88 L 350 551.88 L 353.5 553.63 L 357 551.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="180" y="0" width="347" height="520" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 260px; margin-left: 182px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>  // Instance</div><div>  this.tag = tag;</div><div>  this.key = key;</div><div>  this.elementType = null;</div><div>  this.type = null;</div><div>  this.stateNode = null;</div><div><br /></div><div>  // Fiber</div><div>  this.return = null;</div><div>  this.child = null;</div><div>  this.sibling = null;</div><div>  this.index = 0;</div><div><br /></div><div>  this.ref = null;</div><div><br /></div><div>  this.pendingProps = pendingProps;</div><div>  this.memoizedProps = null;</div><div>  this.updateQueue = null;</div><div>  this.memoizedState = null;</div><div>  this.dependencies = null;</div><div><br /></div><div>  this.mode = mode;</div><div><br /></div><div>  // Effects</div><div>  this.effectTag = NoEffect;</div><div>  this.nextEffect = null;</div><div><br /></div><div>  this.firstEffect = null;</div><div>  this.lastEffect = null;</div><div><br /></div><div>  this.expirationTime = NoWork;</div><div>  this.childExpirationTime = NoWork;</div><div><br /></div><div>  this.alternate = null;<br />}</div></div></div></div></foreignObject><text x="182" y="264" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><rect x="1310" y="850" width="330" height="370" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 1035px; margin-left: 1312px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>// Max 31 bit integer. The max integer size in V8 for 32-bit systems.</div><div>// Math.pow(2, 30) - 1</div><div>// 0b111111111111111111111111111111</div><div>var maxSigned31BitInt = 1073741823;</div><div><br /></div><div>// Times out immediately</div><div>var IMMEDIATE_PRIORITY_TIMEOUT = -1;</div><div>// Eventually times out</div><div>var USER_BLOCKING_PRIORITY = 250;</div><div>var NORMAL_PRIORITY_TIMEOUT = 5000;</div><div>var LOW_PRIORITY_TIMEOUT = 10000;</div><div>// Never times out</div><div>var IDLE_PRIORITY = maxSigned31BitInt;<br /><br /><div>export const Never = 1;</div><div>// Idle is slightly higher priority than Never. It must completely finish in</div><div>// order to be consistent.</div><div>export const Idle = 2;</div><div>export const Sync = MAX_SIGNED_31_BIT_INT;</div><div>export const Batched = Sync - 1;</div><div><br /></div><div>const UNIT_SIZE = 10;</div><div>const MAGIC_NUMBER_OFFSET = Batched - 1;</div></div></div></div></div></foreignObject><text x="1312" y="1039" fill="#000000" font-family="Helvetica" font-size="12px">// Max 31 bit integer. The max integer size in V8 for 3...</text></switch></g><rect x="1310" y="695" width="330" height="130" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 760px; margin-left: 1312px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>export const NoMode = 0b0000;</div><div>export const StrictMode = 0b0001;</div><div>// TODO: Remove BatchedMode and ConcurrentMode by reading from the root</div><div>// tag instead</div><div>export const BatchedMode = 0b0010;</div><div>export const ConcurrentMode = 0b0100;</div><div>export const ProfileMode = 0b1000;</div></div></div></div></foreignObject><text x="1312" y="764" fill="#000000" font-family="Helvetica" font-size="12px">export const NoMode = 0b0000;...</text></switch></g><rect x="1310" y="1235" width="330" height="270" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 1370px; margin-left: 1312px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>export const NoPriority = 0;</div><div>export const ImmediatePriority = 1;</div><div>export const UserBlockingPriority = 2;</div><div>export const NormalPriority = 3;</div><div>export const LowPriority = 4;</div><div>export const IdlePriority = 5;<br /><br /><div>// Except for NoPriority, these correspond to Scheduler priorities. We use</div><div>// ascending numbers so we can compare them like numbers. They start at 90 to</div><div>// avoid clashing with Scheduler's priorities.</div><div>export const ImmediatePriority: ReactPriorityLevel = 99;</div><div>export const UserBlockingPriority: ReactPriorityLevel = 98;</div><div>export const NormalPriority: ReactPriorityLevel = 97;</div><div>export const LowPriority: ReactPriorityLevel = 96;</div><div>export const IdlePriority: ReactPriorityLevel = 95;</div><div>// NoPriority is the absence of priority. Also React-only.</div><div>export const NoPriority: ReactPriorityLevel = 90;</div></div></div></div></div></foreignObject><text x="1312" y="1374" fill="#000000" font-family="Helvetica" font-size="12px">export const NoPriority = 0;...</text></switch></g><rect x="1670" y="720" width="330" height="260" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 850px; margin-left: 1672px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>const NoContext = /*                    */ 0b000000;</div><div>const BatchedContext = /*               */ 0b000001;</div><div>const EventContext = /*                 */ 0b000010;</div><div>const DiscreteEventContext = /*         */ 0b000100;</div><div>const LegacyUnbatchedContext = /*       */ 0b001000;</div><div>const RenderContext = /*                */ 0b010000;</div><div>const CommitContext = /*                */ 0b100000;</div><div><br /></div><div>type RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;</div><div>const RootIncomplete = 0;</div><div>const RootFatalErrored = 1;</div><div>const RootErrored = 2;</div><div>const RootSuspended = 3;</div><div>const RootSuspendedWithDelay = 4;</div><div>const RootCompleted = 5;</div><div>const RootLocked = 6;</div></div></div></div></foreignObject><text x="1672" y="854" fill="#000000" font-family="Helvetica" font-size="12px">const NoContext = /*                    */ 0b000000;...</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>