<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="4091px" height="1516px" viewBox="-0.5 -0.5 4091 1516" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2021-03-31T06:54:39.432Z&quot; agent=&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.146 Safari/537.36&quot; etag=&quot;F8uJPgw26x6y9VnnMZqV&quot; version=&quot;14.2.7&quot; type=&quot;github&quot;&gt;&lt;diagram id=&quot;o5Q6EKL0kc_VLwyrc5Qx&quot; name=&quot;第 1 页&quot;&gt;7R1rc6M48te4xrNVSfEwtvMxfmTGtXnMxsnNzn1JYZBtbjDyAU7s+XC//fRAQjxsgwE/dtjazUIbulstdau71RINtb9Yf3H15fwBmsBuKJK5bqiDhqIore4N+h+GbChEvlFlCpm5lhnAQsDY+gUCoBRAV5YJvMiDPoS2by2jQAM6DjD8CEx3XfgRfWwK7SjVpT4DCcDY0O0k9Ltl+nMK7SqdEP4VWLM5oyy3gxYvdPZw0BJvrpvwQwCpw4badyH06dVi3Qc2lh6TC33vbsuvnDEXOH6WF6z1YP3L0aZzZ/X1r7tfylcwda5Uxpy/YS0GJhJAcAtdfw5n0NHtYQjtuXDlmACjldBd+Mw9hEsElBHwP8D3N0Fv6isfItDcX9jBr5QmJrS1LQHIgyvXADsawMaE7s6Av+O5Fpc4GqsALoDvbtB7LrB133qP8qEHY2bGnwvFii4CyeaQcoD3XbdXASXTekcAci2Z0FgtUMOvUQuGNsCXvc3IbH7CY+PT54bStlHLehMXXc18Ir445Bnohj94erhGAjSB27xdLhtKH+O23ncg8Ja6E+n89n9XeDj2DGhDt6HeYgnNJnpTwswShKlXn0lbekS/HP9qqi8se0NfX0AHIjKoDyOPeGRo4Aek5TqkGzKoxY2KhuSNoURh+B2Tv0Z6AEEG+BozpmGRa6jb9j0r82fZADwIjRKiof3MfyF9rRFkFLK/xxkm2jMcE1M8DCDoeh9zywdjKl8E/EACI3CibBgik1uBN+D6YJ2p9fwn3vBQcdDjIhI5lJS0CeFtAfxBrGcoLvG3ObWgqe8hZeTwmUA/3i3klveNCIyOmOC5xNCiGoHUmypFrSi1otSKUitKrSi1opSrKDF3O+pMC9IPZJ/iOAcS3+k6J13d4IUrHlqxkIwFKB9hfEPkhWFzIbZhsNLdY+0UMQgSl7v5W7z5gZFdKxq7H6wD7PRuE9yVGLyolxC8qIngxZ9b3vWb5fjARRJ/JspAY5m2vsAj1pl4y8SkQMe/4QLdB/id0WJpN/dMJ8TQcVAMOY75fd1yQDCvkIf7Asbo2xkQ+vqMoroHM93Y0JYVwgiXvgUdj2LFI3aK+DXzIP287ckT25EWS4EEZqST0Yp0q7IiavskZmRt+X8zO4GuqRHpaMFtaEPwzUY0KOSta25tfoimqHrT08poerYMguOYnlbC9LiCscEKf/3m4tQH1tQ+twbsdwd8xFWSJErGG8fAbzSZxRD1Xb2VMqVcptYEuKLtkzBv13G7uB9Ris6vnInuG3Ngvi5NZC29ZvNzzMIGb0qNTq+IecoGWhEuuHybRIiPyNNBwuKZJkEefT4m+3CxhA4ZnLfOCnc4/s3QbXuiGz8/C3yWxX1n8HmnlEOIC/yVi4MVpADfVhPbImNi5Hi+7higyduzYzScmUm+iTp23RSL3E2xyHJljp3S+l09u5uM5lVRT2lfbxL2NU3xipkY4ixix4qZSeJkFUdprFwaXDJjj81LGXiZmRs5U8ixR6ElkFkCx7ScWX9u2SZqR+nNWGLkOppDSseMPFjLQ3PTcL20XB27ty/WIiTzCL9D92eZhAi+slvhI57hyv+qO6YtyAi+UHhZIwmsyx+hbOhUhH6+MVG3hjJh96X0qOv5PezalK+2gU9B3JKqkH9zLeha/kYY7BxUlni+0d6tTKcQifHKw2MImBURsfXqaTho6P/pwA8nkNc9eCelB1W05RvCX6mwiCktg0JGPzULc9YU/WkCR5/YYIxjkZUN3BdXN5AwPlcSeRBxkOgJhRd4Wpmj2M4cDbhIVtg3R+y8IZ+K/disIIggjCzAAiIP0xyFDHnRyFIaA78y8oGRF6g/4ER8hD6CFKffGZQ2SojKe6DPw7vKRgmdk5BQGC2ha4rb/Fwy2f5skWhQt62Zg65tMA2RFQoOO61odHilSsn4UG2lxIcttar4UL45n5RdxoxdLKbsHDGmlDsXsVxwktWcU4hZqOI7RU1ZZ3fwnrIGj8OFq8Cy4PUIYlxSVsrvyL/SAHiGa00Atq0fc+Bi3+QD/9HJpeUQa4wvSUIQy38NjBU2y4Q8MssZzGgBPpOrSzaIsMFCJIJlGIeGnlb4nBSdOtLWpKpoS4JjYeqjfymr/+vRvHDIsHyIh1i+4FNm0bQ2dfq0HTTf/srS3GFzuqeR/0Guc6UCPFLOPbuAzyzX3WrHqhhS1h+5hxPJdiuVZbulTOnUJMhAoQVWj3hKkycdebKzmF8boxMJN13w3xXw/H74U+HQgpHzWFwAnak120JxHHmoNNogPUlpIB1Z+SBMYd5B9w4rU7MI0TQ+RFEXqiTYjrx8xPEeK4R/f1eed+DUamkRS6Om1EupapqlqSxuwu9ftI/Nt/Ls87FPujzGEEcNemR8R+oRaG1TOGeH9UlkCiaLYPiCZ9Rvp7rtAREYSWnQ+TtTNQIphaC1EJw+QtxydceEiz9BmLImVQrccuRYJqdNPTPdlFvRpEYrbc27ndTNyqqQlEsPf5WsRYnbuuZIupksS9ypmzRjesccZuxJp5b/KP2YdmZSvx1O3cqxHMu30Nj/BUxCP2YvvkKP1C9R/yNkpagLFFV0nkJPcFOMShLhNYr8fRBZh6ObHPfQuRCTo8YCjyv5Ji2P2knxB+TKjE730o1OO6vROa1D0M4S4dEk1ILE6oV0iy6uhLUz9F9FQjN8oNdBfVoFyywLUX9Dgg8BuIPNZpCMisDGvmsZ9LESFmEkQPyjrZIIODiSGI7X3oob8gjLYrjA9MSMvDAzk1mZFuGzWTHIbNHV0G8uXHqRtNZPsInc42ZWUjFf/kTC996ziSTzPNKqbB45yXpcmfNI5rWb9knnkT1rN2xpuaARCNZxWElzEWRVVXH+FCJTosvFUQK6/fFlsyy/EMyvAmnSXz4Ac4mVP3zgBNFKweZxQ1+u1AxcOVt+X1gTG000peO1kIlcc6xSTpQldm7QJdMzGWtirROd3Rlf0Sm/OBFWzxWlUlb/0uW6v1ZgVb59YJyPfbEstyzsJiB1mo5hgUJiKXtQRBzWA4KpKgzicDoFhu8Vn6IInhdhOn2EFHcZksOlsQG2M+pPUnlcnK3tNbRn1+Ita4/llQ6TKbDMbRhlS0C3yVbI7VZLoHUpdZSJsK2tZYzbtMoqD9Rs8QQzYw86dkXwQXzSxMIqg4uuZ8C9RpcvpKBrQZ4IwFj8OHYLSr7+1W3gI1cwWFWuKAJv4/lg4V3nGDGcF39+vYQfTYUG8Co5+uUK/SfnRyZN5J3/ZMb4rrtUCmM0fICpyj3LHwlpdFnqqJ2W3FXUo2lY0ESs5HiexnuUUIcsFsC0kILZm5xtGz08DAej25fh27fn0dPz6OXH28voYfj0+sIbeZWztoxNku9Ik1a6jVmSfJHdXAy+jofPb737p/6fo8cvnEnOnKLlcqIpzsen54fb++0t1qR8rjnFev/0fTtKWcqJk8vxEbwT3TtchKPB/TApueSo3jUyd65xoRkOuqSiKFjsYjwHbT+o3SO6Ic/CbfZsbD7JSJqjK4J7GW7C8ufktClCFRuvEUm8r2iRE1wsbUA1Q6JbCQMLlpch6Jq0I/B20AkImmshi+f42S1eQlYjceOhkkdUCVT4QAOO6uH277fx6MvjcPCmym+90cvb6PGlEPog780pBOSu8nfxwfaPsfL6iNozHv17KCjYIXgebr+M+m+Prw89ZGWe7u7Gw1Blw+Zma+F5+yuyLEUdFiVt30da/ZLaqcxf6WbxV5LWBT6IQaE0yWtbk4oTrt5EsB5muV6eBk+07vcZhezvoBFfMtIdPKoSq2kTmnnWTZp5mrpw0WCl9a5wikh2Tmim1kKNRFgLK35CPvl0LoE2uZzIMMsF+/ObC6eWDWJo5d3D5Mz1lZUfnq7cUM10TkSKuib2Sxfr3RHzdhN4c+lrAu+rB9yeDY2fJN8YQ11sZn6E7kK3E0hzhQ0JpPfwI4GxVUyyyBdJoNQOdwzDYGBtgCWmQANGcUj0qY3zqEOFzIG3hMQ+Ej+LbzkOPT4L4ABT+o5fWHl5lrMCZnTPoEnlBk5ELCbAJT4mJkf2NRnEm8SOI93hhLjDhti2foLwjSBI3hCjoRMp6vgPXr0lrOfm6h3iUz8lw9a9OWXuw8IHW4Yy+OTFpVCeCgXzlW74DBTdSn9zU75u7aXZLUQzpnR7qXVK08a9pNrlqeleWloeWmHYKVptEoRRR0SfeIAsIktwGo7GDVaHW5voEOHlCjr2psAAFU/U2NfA/bPJhU31WjfjXK9U5pqz2pLdc33YW/HNlIjoH41DD5o7C9AfLJcoSXnji5jffDGyiTY5lzPFmkyyfhfT4H0yOCypMLA8wwU+OIksRP5zhlF8JkvflVtJCwR294RnW9l9Jt86uaQxFzY6d1o4jJ0XC+uiFI03Ws5tT7fHGntfDSq1cAnpcG35uHZiFdY3YF+d1u/K/ErhVyq/avErjV/lcuH4WCVHi7KctMDHgbjudF+3h64LXSEve5DhJhKKIcoV84qI+KlfHFWuSDcV1XcUDA2ArR8Y64o4+4H8Q/Zy+cgiqnsU0gh4dg2KM3M64zvn0zbOp/qclR0T27r0suNW5q+QKacsO2Zs1ue9injr8153Y67Pe80xkurzXqM9Wp/3uk889XmvmYta6/NeKyzYrM97rc97zTlK6vNezzjOU5T4ga+tlA+CHPnAV0259EhPyRjpaaf9cJJyhEgvrNisN5jWG0wPGTj1BtN6g+kx2Kk3mGbivN5gemqDWG8wPZyreoNp6bmKeoPpKQK3rpQpcDvqDtPWpR9r2cr8re3TBm7tU8iZfxGFfwXlh/BL+hdRTtI3p10+TR45SsxIYHlMaKxwXHiN2jCkIWJvMzKbn/AWnk+ZjhElxa6DpwfkP+PSpiY/6B/R2YGAHuKf8jkCA9ow+Di6O5voTVL2QhCmXtGPDGPjOoWOfzXVF5YdlOEuoAM9YgQjj5B94eQBablupHzoQCM9hazmHO/JsTFgSKB0XxO7Yx2gkS5AkAG+xoxpWOQado72PCvzZ9kYPAiNEqKh/cx/IX1NLGwA2d/jDBPtGY6J6SsGEHTiJIOBZJrBcKKjGCKTW4E3OsNkaT3/iTc81BwNzzrhk3IoKWkTwtsCmE5BobjE34KpKPU9pI0cPhPox7uF3PK+EYHRERM8lxhafIZP+7JFrSi1otSKUitKrSi1ohRVlCJBYxlRohY/h7zNAOK3DxhMjBKrq+NMHkNk4u9SkM9S0Ppb/kGMmPjo579EGXm+C3+CPrU3Awc6ONKZWrYdA7EA3AB46RwBsFgtQ7dvgx8WlmmSMCmtU6LdVka/tORYv2gp/ZK26lpd7L79tIWtdj7bh8zM/V8dyaY9/5zu73a0WPen1FcftfvZ8WTld3+0Lvd36+l2J6boqnzqnj5Jko4lj9h1ls/plpg80rLW3mutUyaPGJsVV2QkQBPdA3RdjygyPym/VCJk6eWVrFBWSQavwlRPhTSmry/9lQvM4zTqeNTERbKKG1U9lUhPHadRVVG7lMUpVY0vTqXNenI3ZdqTKzuzQEv9FlhpHk6k9OI383JUJR7OKCmfKTmul9M6zUwaX20/q4+ullqMklxrJ5/kQRd0ggrqhMoWwFLf2FA3qzThbGPPwTSqlbPDP1ZfTfOFwp3fb+bqnOPM1d5ty0r9xLzopbNFa8Gl3r0isKdz/zkTnhY/311Jyd/JWjkzXiNIQoe/Celndfh/&lt;/diagram&gt;&lt;/mxfile&gt;" resource="https://app.diagrams.net/#Hgwtjs%2Fread-code%2Fmaster%2Freact16.10%2F%E5%9B%BE%E7%89%87%2F%E7%8A%B6%E6%80%81.svg"><defs/><g><path d="M 260 810 L 280 810 L 280 820 L 293.63 820" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 298.88 820 L 291.88 823.5 L 293.63 820 L 291.88 816.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="0" y="780" width="260" height="60" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 810px; margin-left: 1px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">div = document.getElementById('root')<br /><br />ReactDOM.render(App, div)<br /><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span></div></div></div></foreignObject><text x="130" y="814" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">div = document.getElementById('root')...</text></switch></g><path d="M 637 770 L 608.5 770 L 608.5 780 L 586.37 780" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 581.12 780 L 588.12 776.5 L 586.37 780 L 588.12 783.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="637" y="730" width="260" height="80" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 770px; margin-left: 638px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">this._internalRoot = <span>createRootImpl(</span><div>  container: div,</div><div>  tag: LegacyRoot,</div><div>  options: undefined,</div><div>)</div></div></div></div></foreignObject><text x="767" y="774" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">this._internalRoot = createRootImpl(...</text></switch></g><path d="M 300 860 L 130 860 L 130 846.37" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 130 841.12 L 133.5 848.12 L 130 846.37 L 126.5 848.12 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="300" y="740" width="280" height="160" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 278px; height: 1px; padding-top: 820px; margin-left: 301px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">root = div._reactRootContainer = new ReactSyncRoot(div, LegacyRoot:0)<br /><br />fiberRoot = root.._internalRoot<br /><br /><div>unbatchedUpdates(() =&gt; {</div><div>      updateContainer(ReactNode:App, fiberRoot, parentComponent:null, callback);</div><div>    });<br /><br />return getPublicRootInstance(fiberRoot)<br /></div></div></div></div></foreignObject><text x="440" y="824" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">root = div._reactRootContainer = new ReactSync...</text></switch></g><path d="M 950 575 L 930 575 L 930 497.5 L 923.37 497.5" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 918.12 497.5 L 925.12 494 L 923.37 497.5 L 925.12 501 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="950" y="360" width="340" height="430" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 338px; height: 1px; padding-top: 575px; margin-left: 952px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>  this.tag = tag;</div><div>  this.current = null;</div><div>  this.containerInfo = containerInfo;</div><div>  this.pendingChildren = null;</div><div>  this.pingCache = null;</div><div>  this.finishedExpirationTime = NoWork;</div><div>  this.finishedWork = null;</div><div>  this.timeoutHandle = noTimeout;</div><div>  this.context = null;</div><div>  this.pendingContext = null;</div><div>  this.hydrate = hydrate;</div><div>  this.firstBatch = null;</div><div>  this.callbackNode = null;</div><div>  this.callbackPriority = NoPriority;</div><div>  this.firstPendingTime = NoWork;</div><div>  this.firstSuspendedTime = NoWork;</div><div>  this.lastSuspendedTime = NoWork;</div><div>  this.nextKnownPendingLevel = NoWork;</div><div>  this.lastPingedTime = NoWork;</div><div>  this.lastExpiredTime = NoWork;</div><div><br /></div><div>  if (enableSchedulerTracing) {</div><div>    this.interactionThreadID = unstable_getThreadID();</div><div>    this.memoizedInteractions = new Set();</div><div>    this.pendingInteractionMap = new Map();</div><div>  }</div><div>  if (enableSuspenseCallback) {</div><div>    this.hydrationCallbacks = null;</div><div>  }</div><div>}</div></div></div></div></foreignObject><text x="952" y="579" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><path d="M 670 890 L 625 890 L 625 860 L 586.37 860" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 581.12 860 L 588.12 856.5 L 586.37 860 L 588.12 863.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 820 950 L 820 970 L 820 960 L 820 973.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 820 978.88 L 816.5 971.88 L 820 973.63 L 823.5 971.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="670" y="830" width="300" height="120" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 298px; height: 1px; padding-top: 890px; margin-left: 671px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div style="text-align: left">// Describes where we are in the React execution stack</div><div style="text-align: left"><span>let executionContext: ExecutionContext = NoContext:0;</span></div><div style="text-align: left">executionContext &amp;= ~BatchedContext:1;</div><div><div style="text-align: left"><span>  executionContext |= LegacyUnbatchedContext:8;</span></div><div style="text-align: left"><br /></div><div style="text-align: left"><span> updateContainer(ReactNode:App, fiberRoot, parentComponent:null, callback);</span></div></div></div></div></div></foreignObject><text x="820" y="894" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">// Describes where we are in the React execution s...</text></switch></g><rect x="655" y="980" width="330" height="130" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 1045px; margin-left: 657px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div><div>const current = container.current;</div><div>  const currentTime = requestCurrentTime();</div><div>  const suspenseConfig = requestCurrentSuspenseConfig();</div><div>  const expirationTime = computeExpirationForFiber(</div><div>    currentTime,</div><div>    current,</div><div>    suspenseConfig,</div><div>  );</div></div></div></div></div></foreignObject><text x="657" y="1049" fill="#000000" font-family="Helvetica" font-size="12px">const current = container.current;...</text></switch></g><path d="M 767 700 L 767 720 L 767 710 L 767 723.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 767 728.88 L 763.5 721.88 L 767 723.63 L 770.5 721.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="624" y="620" width="286" height="80" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 284px; height: 1px; padding-top: 660px; margin-left: 626px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "> root = createContainer(container, tag, hydrate:false, hydrationCallbacks:null)<br /><br />div.__reactContainere$randomKey = root.current<br /><br />return root</div></div></div></foreignObject><text x="626" y="664" fill="#000000" font-family="Helvetica" font-size="12px">root = createContainer(container, tag, hydrate...</text></switch></g><path d="M 743.5 580 L 743.5 600 L 767 600 L 767 613.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 767 618.88 L 763.5 611.88 L 767 613.63 L 770.5 611.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="570" y="470" width="347" height="110" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 525px; margin-left: 572px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "> root = new FiberRootNode(div, LegacyRoot,hydrate:false)<br /><br /><div>const uninitializedFiber = createHostRootFiber(LegacyRoot);</div><div>  root.current = uninitializedFiber;</div><div>  uninitializedFiber.stateNode = root;</div><br />return root</div></div></div></foreignObject><text x="572" y="529" fill="#000000" font-family="Helvetica" font-size="12px">root = new FiberRootNode(div, LegacyRoot,hydrate:false)...</text></switch></g><path d="M 527 640 L 548.5 640 L 548.5 525 L 563.63 525" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 568.88 525 L 561.88 528.5 L 563.63 525 L 561.88 521.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="180" y="570" width="347" height="140" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 640px; margin-left: 182px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>let mode;</div><div>  if (tag === ConcurrentRoot) {</div><div>    mode = ConcurrentMode | BatchedMode | StrictMode;</div><div>  } else if (tag === BatchedRoot) {</div><div>    mode = BatchedMode | StrictMode;</div><div>  } else {</div><div>    mode = NoMode;</div><div>  }</div><div>  return new FiberNode(tag:HostRoot, pendingProps:null, key:null, mode)</div></div></div></div></foreignObject><text x="182" y="644" fill="#000000" font-family="Helvetica" font-size="12px">let mode;...</text></switch></g><path d="M 353.5 530 L 353.5 563.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 353.5 568.88 L 350 561.88 L 353.5 563.63 L 357 561.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="180" y="10" width="347" height="520" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 270px; margin-left: 182px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>  // Instance</div><div>  this.tag = tag;</div><div>  this.key = key;</div><div>  this.elementType = null;</div><div>  this.type = null;</div><div>  this.stateNode = null;</div><div><br /></div><div>  // Fiber</div><div>  this.return = null;</div><div>  this.child = null;</div><div>  this.sibling = null;</div><div>  this.index = 0;</div><div><br /></div><div>  this.ref = null;</div><div><br /></div><div>  this.pendingProps = pendingProps;</div><div>  this.memoizedProps = null;</div><div>  this.updateQueue = null;</div><div>  this.memoizedState = null;</div><div>  this.dependencies = null;</div><div><br /></div><div>  this.mode = mode;</div><div><br /></div><div>  // Effects</div><div>  this.effectTag = NoEffect;</div><div>  this.nextEffect = null;</div><div><br /></div><div>  this.firstEffect = null;</div><div>  this.lastEffect = null;</div><div><br /></div><div>  this.expirationTime = NoWork;</div><div>  this.childExpirationTime = NoWork;</div><div><br /></div><div>  this.alternate = null;<br />}</div></div></div></div></foreignObject><text x="182" y="274" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><rect x="1310" y="860" width="330" height="370" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 1045px; margin-left: 1312px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>// Max 31 bit integer. The max integer size in V8 for 32-bit systems.</div><div>// Math.pow(2, 30) - 1</div><div>// 0b111111111111111111111111111111</div><div>var maxSigned31BitInt = 1073741823;</div><div><br /></div><div>// Times out immediately</div><div>var IMMEDIATE_PRIORITY_TIMEOUT = -1;</div><div>// Eventually times out</div><div>var USER_BLOCKING_PRIORITY = 250;</div><div>var NORMAL_PRIORITY_TIMEOUT = 5000;</div><div>var LOW_PRIORITY_TIMEOUT = 10000;</div><div>// Never times out</div><div>var IDLE_PRIORITY = maxSigned31BitInt;<br /><br /><div>export const Never = 1;</div><div>// Idle is slightly higher priority than Never. It must completely finish in</div><div>// order to be consistent.</div><div>export const Idle = 2;</div><div>export const Sync = MAX_SIGNED_31_BIT_INT;</div><div>export const Batched = Sync - 1;</div><div><br /></div><div>const UNIT_SIZE = 10;</div><div>const MAGIC_NUMBER_OFFSET = Batched - 1;</div></div></div></div></div></foreignObject><text x="1312" y="1049" fill="#000000" font-family="Helvetica" font-size="12px">// Max 31 bit integer. The max integer size in V8 for 3...</text></switch></g><rect x="1310" y="705" width="330" height="130" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 770px; margin-left: 1312px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>export const NoMode = 0b0000;</div><div>export const StrictMode = 0b0001;</div><div>// TODO: Remove BatchedMode and ConcurrentMode by reading from the root</div><div>// tag instead</div><div>export const BatchedMode = 0b0010;</div><div>export const ConcurrentMode = 0b0100;</div><div>export const ProfileMode = 0b1000;</div></div></div></div></foreignObject><text x="1312" y="774" fill="#000000" font-family="Helvetica" font-size="12px">export const NoMode = 0b0000;...</text></switch></g><rect x="1310" y="1245" width="330" height="270" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 1380px; margin-left: 1312px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>export const NoPriority = 0;</div><div>export const ImmediatePriority = 1;</div><div>export const UserBlockingPriority = 2;</div><div>export const NormalPriority = 3;</div><div>export const LowPriority = 4;</div><div>export const IdlePriority = 5;<br /><br /><div>// Except for NoPriority, these correspond to Scheduler priorities. We use</div><div>// ascending numbers so we can compare them like numbers. They start at 90 to</div><div>// avoid clashing with Scheduler's priorities.</div><div>export const ImmediatePriority: ReactPriorityLevel = 99;</div><div>export const UserBlockingPriority: ReactPriorityLevel = 98;</div><div>export const NormalPriority: ReactPriorityLevel = 97;</div><div>export const LowPriority: ReactPriorityLevel = 96;</div><div>export const IdlePriority: ReactPriorityLevel = 95;</div><div>// NoPriority is the absence of priority. Also React-only.</div><div>export const NoPriority: ReactPriorityLevel = 90;</div></div></div></div></div></foreignObject><text x="1312" y="1384" fill="#000000" font-family="Helvetica" font-size="12px">export const NoPriority = 0;...</text></switch></g><rect x="1670" y="730" width="330" height="260" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 328px; height: 1px; padding-top: 860px; margin-left: 1672px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>const NoContext = /*                    */ 0b000000;</div><div>const BatchedContext = /*               */ 0b000001;</div><div>const EventContext = /*                 */ 0b000010;</div><div>const DiscreteEventContext = /*         */ 0b000100;</div><div>const LegacyUnbatchedContext = /*       */ 0b001000;</div><div>const RenderContext = /*                */ 0b010000;</div><div>const CommitContext = /*                */ 0b100000;</div><div><br /></div><div>type RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;</div><div>const RootIncomplete = 0;</div><div>const RootFatalErrored = 1;</div><div>const RootErrored = 2;</div><div>const RootSuspended = 3;</div><div>const RootSuspendedWithDelay = 4;</div><div>const RootCompleted = 5;</div><div>const RootLocked = 6;</div></div></div></div></foreignObject><text x="1672" y="864" fill="#000000" font-family="Helvetica" font-size="12px">const NoContext = /*                    */ 0b000000;...</text></switch></g><path d="M 2790 395 L 2900 395 L 2900 440 L 3003.63 440" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3008.88 440 L 3001.88 443.5 L 3003.63 440 L 3001.88 436.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="2450" y="180" width="340" height="430" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 338px; height: 1px; padding-top: 395px; margin-left: 2452px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>  this.tag = tag;</div><div>  this.current = null;</div><div>  this.containerInfo = containerInfo;</div><div>  this.pendingChildren = null;</div><div>  this.pingCache = null;</div><div>  this.finishedExpirationTime = NoWork;</div><div>  this.finishedWork = null;</div><div>  this.timeoutHandle = noTimeout;</div><div>  this.context = null;</div><div>  this.pendingContext = null;</div><div>  this.hydrate = hydrate;</div><div>  this.firstBatch = null;</div><div>  this.callbackNode = null;</div><div>  this.callbackPriority = NoPriority;</div><div>  this.firstPendingTime = NoWork;</div><div>  this.firstSuspendedTime = NoWork;</div><div>  this.lastSuspendedTime = NoWork;</div><div>  this.nextKnownPendingLevel = NoWork;</div><div>  this.lastPingedTime = NoWork;</div><div>  this.lastExpiredTime = NoWork;</div><div><br /></div><div>  if (enableSchedulerTracing) {</div><div>    this.interactionThreadID = unstable_getThreadID();</div><div>    this.memoizedInteractions = new Set();</div><div>    this.pendingInteractionMap = new Map();</div><div>  }</div><div>  if (enableSuspenseCallback) {</div><div>    this.hydrationCallbacks = null;</div><div>  }</div><div>}</div></div></div></div></foreignObject><text x="2452" y="399" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><path d="M 3357 440 L 3433.5 440 L 3433.5 435 L 3503.63 435" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3508.88 435 L 3501.88 438.5 L 3503.63 435 L 3501.88 431.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="3010" y="180" width="347" height="520" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 345px; height: 1px; padding-top: 440px; margin-left: 3012px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>  // Instance</div><div>  this.tag = tag;</div><div>  this.key = key;</div><div>  this.elementType = null;</div><div>  this.type = null;</div><div>  this.stateNode = null;</div><div><br /></div><div>  // Fiber</div><div>  this.return = null;</div><div>  this.child = null;</div><div>  this.sibling = null;</div><div>  this.index = 0;</div><div><br /></div><div>  this.ref = null;</div><div><br /></div><div>  this.pendingProps = pendingProps;</div><div>  this.memoizedProps = null;</div><div>  this.updateQueue = null;</div><div>  this.memoizedState = null;</div><div>  this.dependencies = null;</div><div><br /></div><div>  this.mode = mode;</div><div><br /></div><div>  // Effects</div><div>  this.effectTag = NoEffect;</div><div>  this.nextEffect = null;</div><div><br /></div><div>  this.firstEffect = null;</div><div>  this.lastEffect = null;</div><div><br /></div><div>  this.expirationTime = NoWork;</div><div>  this.childExpirationTime = NoWork;</div><div><br /></div><div>  this.alternate = null;<br />}</div></div></div></div></foreignObject><text x="3012" y="444" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><path d="M 2900 60 L 2900 120 L 2620 120 L 2620 173.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 2620 178.88 L 2616.5 171.88 L 2620 173.63 L 2623.5 171.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><path d="M 2900 60 L 2900 120 L 3183.5 120 L 3183.5 173.63" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3183.5 178.88 L 3180 171.88 L 3183.5 173.63 L 3187 171.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="2770" y="0" width="260" height="60" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 258px; height: 1px; padding-top: 30px; margin-left: 2771px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">div = document.getElementById('root')<br /><br />ReactDOM.render(App, div)<br /><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span><span style="color: rgba(0 , 0 , 0 , 0) ; font-family: monospace ; font-size: 0px">%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22div%20%3D%20document.getElementById('root')%22%20style%3D%22rounded%3D0%3BwhiteSpace%3Dwrap%3Bhtml%3D1%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%22110%22%20y%3D%2260%22%20width%3D%22260%22%20height%3D%2260%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E</span></div></div></div></foreignObject><text x="2900" y="34" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">div = document.getElementById('root')...</text></switch></g><rect x="2620" y="100" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 110px; margin-left: 2621px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">div._reactRootContainer</div></div></div></foreignObject><text x="2640" y="114" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">div._r...</text></switch></g><rect x="3085" y="90" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 100px; margin-left: 3086px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="text-align: left">div.__reactContainere$randomKey</span></div></div></div></foreignObject><text x="3105" y="104" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">div.__...</text></switch></g><rect x="2880" y="350" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 360px; margin-left: 2881px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="text-align: left">this.current</span></div></div></div></foreignObject><text x="2900" y="364" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">this.c...</text></switch></g><path d="M 3690 435 L 3903.63 435" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 3908.88 435 L 3901.88 438.5 L 3903.63 435 L 3901.88 431.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="3510" y="350" width="180" height="170" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 178px; height: 1px; padding-top: 435px; margin-left: 3512px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>    baseState: null,</div><div>    firstUpdate: null,</div><div>    lastUpdate: null,</div><div>    firstCapturedUpdate: null,</div><div>    lastCapturedUpdate: null,</div><div>    firstEffect: null,</div><div>    lastEffect: null,</div><div>    firstCapturedEffect: null,</div><div>    lastCapturedEffect: null,</div><div>  }</div></div></div></div></foreignObject><text x="3512" y="439" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><rect x="3420" y="370" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 380px; margin-left: 3421px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="text-align: left">this.updateQueue</span></div></div></div></foreignObject><text x="3440" y="384" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">this.u...</text></switch></g><rect x="3910" y="350" width="180" height="170" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 178px; height: 1px; padding-top: 435px; margin-left: 3912px;"><div style="box-sizing: border-box; font-size: 0; text-align: left; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div>{</div><div>    expirationTime,</div><div>    suspenseConfig,</div><div><br /></div><div>    tag: UpdateState,</div><div>    payload: null,</div><div>    callback: null,</div><div><br /></div><div>    next: null,</div><div>    nextEffect: null,</div><div>  }</div></div></div></div></foreignObject><text x="3912" y="439" fill="#000000" font-family="Helvetica" font-size="12px">{...</text></switch></g><rect x="3740" y="400" width="150" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignObject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 148px; height: 1px; padding-top: 410px; margin-left: 3741px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><div style="text-align: left"><span>firstUpdate = lastUpdate</span></div></div></div></div></foreignObject><text x="3815" y="414" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">firstUpdate = lastUpdate</text></switch></g></g><switch><g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg>